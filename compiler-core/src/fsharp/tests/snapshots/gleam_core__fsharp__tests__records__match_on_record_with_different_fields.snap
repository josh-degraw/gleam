---
source: compiler-core/src/fsharp/tests/records.rs
expression: "\ntype Action(element) {\n  Stop\n  Continue(element, fn() -> Action(element))\n}\npub type Step(element, accumulator) {\n  Next(element: element, accumulator: accumulator)\n  Done\n}\nfn do_unfold(\n  initial: acc,\n  f: fn(acc) -> Step(element, acc),\n) -> fn() -> Action(element) {\n  fn() {\n    case f(initial) {\n      Next(x, acc) -> Continue(x, do_unfold(acc, f))\n      Done -> Stop\n    }\n  }\n}"
---
module rec my.``mod``

type private Action<'element> =
| Continue of 'element * (unit -> Action<'element>)
| Stop
    
type Step<'element, 'accumulator> =
| Done
| Next of element: 'element * accumulator: 'accumulator
    
let private do_unfold (initial: 'acc) (f: 'acc -> Step<'element, 'acc>): unit -> Action<'element> = begin
    fun() -> begin
        match f initial with
        | (Next(x, acc)) ->
            Continue(x, (do_unfold acc f))
        | (Done) ->
            Stop
    end
end
