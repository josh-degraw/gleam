---
source: compiler-core/src/fsharp/tests/variables.rs
assertion_line: 82
expression: "const int = 42\nconst int_alias = int\npub fn use_int_alias() { int_alias }\n\nfn int_identity(i: Int) { i }\nconst int_identity_alias: fn(Int) -> Int = int_identity\npub fn use_int_identity_alias() { int_identity_alias(42) }\n\nconst compound: #(Int, fn(Int) -> Int, fn(Int) -> Int) = #(int, int_identity, int_identity_alias)\npub fn use_compound() { compound.1(compound.0) }\n"
---
module rec my.``mod``
let int_identity(i: int): int = begin
    i
end
[<Literal>]
let int = 42
[<Literal>]
let int_alias = // TODO: haven't figured out how to handle this constant type yet
let use_int_alias(): int = begin
    int_alias
end
[<Literal>]
let int_identity_alias = // TODO: haven't figured out how to handle this constant type yet
let use_int_identity_alias(): int = begin
    int_identity_alias (42)
end
[<Literal>]
let compound = // TODO: haven't figured out how to handle this constant type yet
let use_compound(): int = begin
    // TODO: Implement other expression types (// TODO: Implement other expression types)
end
