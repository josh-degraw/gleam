---
source: compiler-core/src/fsharp/tests/custom_types.rs
expression: "\npub opaque type PositiveInt {\n  PositiveInt(inner: Int)\n}\n\npub fn new_positive_int(i: Int) -> PositiveInt {\n  case i >= 0 {\n    True -> PositiveInt(i)\n    False -> PositiveInt(0)\n  }\n}\n\npub fn to_int(i: PositiveInt) -> Int {\n  i.inner\n}\n"
---
module rec my.``mod``

type PositiveInt = 
    private 
        { inner: int64 }
let new_positive_int (i: int64): PositiveInt = begin
    match i >= 0L with
    | true ->
        { inner = i }
    | false ->
        { inner = 0L }
end
let to_int (i: PositiveInt): int64 = begin
    i.inner
end
