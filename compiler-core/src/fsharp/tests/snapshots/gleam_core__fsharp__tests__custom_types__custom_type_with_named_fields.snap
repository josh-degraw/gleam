---
source: compiler-core/src/fsharp/tests/custom_types.rs
assertion_line: 196
expression: "\ntype Cat {\n  Cat(name: String, cuteness: Int)\n}\n\ntype Box {\n  Box(occupant: Cat)\n}\n\nconst felix = Cat(\"Felix\", 12)\nconst tom = Cat(cuteness: 1, name: \"Tom\")\n\nfn go() {\n  Cat(\"Nubi\", 1)\n  Cat(2, name: \"Nubi\")\n  Cat(cuteness: 3, name: \"Nubi\")\n}\n\nfn update(cat) {\n  Cat(..cat, name: \"Sid\")\n  Cat(..cat, name: \"Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!\")\n  Cat(..new_cat(), name: \"Molly\")\n  let box = Box(occupant: cat)\n  Cat(..box.occupant, cuteness: box.occupant.cuteness + 1)\n}\n\nfn access(cat: Cat) {\n  cat.cuteness\n}\n\nfn new_cat() {\n  Cat(name: \"Beau\", cuteness: 11)\n}\n"
---
module rec my.``mod``
type private Cat = { name: string; cuteness: int }
type private Box = { occupant: Cat }
let private go (): Cat = begin
    { name = "Nubi"; cuteness = 1 }
    { name = "Nubi"; cuteness = 2 }
    { name = "Nubi"; cuteness = 3 }
end
let private access (cat: Cat): int = begin
    cat.cuteness
end
let private new_cat (): Cat = begin
    { name = "Beau"; cuteness = 11 }
end
let private update (cat: Cat): Cat = begin
    { cat with name = "Sid" }
    { cat with name = "Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!" }
    { new_cat() with name = "Molly" }
    let box = { occupant = cat }
    { box.occupant with cuteness = box.occupant.cuteness + 1 }
end
let private felix = { name = "Felix"; cuteness = 12 }
let private tom = { name = "Tom"; cuteness = 1 }
